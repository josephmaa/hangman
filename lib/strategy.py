from collections import defaultdict


def generate_word_families(
    character: str,
    words: list[str],
    existing_characters: str = "",
) -> defaultdict[str, list[str]]:
    """
    Generates all word families generated by the choice of character.

    >>> generate_word_families('--', 'a', ['ab', 'ac', 'aa', 'bb'])
    {'a-':['ab', 'ac', 'aa], 'aa':['aa']}

    >>> generate_word_families('-----'. 'b', ['baked', 'brown', 'bunch', 'ruble', 'tuber', 'boing'])
    {'b----':['baked', 'brown', 'bunch', 'boing'], '--b--':['ruble', 'tuber']}
    """
    word_families = defaultdict(list)

    for word in words:
        key = list(existing_characters)
        for i in range(len(existing_characters)):
            if word[i] == character:
                key[i] = character
        key = "".join(key)
        if key == word:
            word_families[key]
        else:
            word_families[key].append(word)

    return word_families


def pick_largest_word_family(word_families):
    """
    Picks the largest word family and returns the current largest remaining word family.
    """
    return max(word_families.items(), key=lambda t: len(t[1]))
